package EastRent;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;

public class DataRentalFrame extends JFrame {

    public class DataRental {

        private String nama;
        private String noHp;
        private String jenisDokumenJaminan;
        private String alamat;

        public DataRental(String nama, String noHp, String jenisDokumenJaminan, String alamat) {
            setNama(nama);
            setNoHp(noHp);
            setJenisDokumenJaminan(jenisDokumenJaminan);
            setAlamat(alamat);
        }

        public String getNama() {
            return nama;
        }

        public void setNama(String nama) {
            if (nama == null || nama.trim().isEmpty()) {
                throw new IllegalArgumentException("Nama tidak boleh kosong");
            }
            this.nama = nama.trim();
        }

        public String getNoHp() {
            return noHp;
        }

        public void setNoHp(String noHp) {
            if (noHp == null || !noHp.matches("\\d{10,13}")) {
                throw new IllegalArgumentException("Nomor HP harus terdiri dari 10-13 digit angka.");
            }
            this.noHp = noHp.trim();
        }

        public String getJenisDokumenJaminan() {
            return jenisDokumenJaminan;
        }

        public void setJenisDokumenJaminan(String jenisDokumenJaminan) {
            if (jenisDokumenJaminan == null || jenisDokumenJaminan.trim().isEmpty()) {
                throw new IllegalArgumentException("Jenis dokumen jaminan tidak boleh kosong");
            }
            this.jenisDokumenJaminan = jenisDokumenJaminan.trim();
        }

        public String getAlamat() {
            return alamat;
        }

        public void setAlamat(String alamat) {
            if (alamat == null || alamat.trim().isEmpty()) {
                throw new IllegalArgumentException("Alamat tidak boleh kosong");
            }
            this.alamat = alamat.trim();
        }
    }

    public DataRentalFrame() {
        setTitle("Data Rental");
        setSize(400, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 30, 20, 30));
        mainPanel.setBackground(new Color(85, 85, 220));
        add(mainPanel);

        // Header
        JLabel headerLabel = new JLabel("Data Rental", SwingConstants.CENTER);
        headerLabel.setFont(new Font("Arial", Font.BOLD, 24));
        headerLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 20, 0)); // Menambahkan jarak bawah 20px
        headerLabel.setForeground(new Color(255, 200, 175));
        mainPanel.add(headerLabel, BorderLayout.NORTH);

        // Input Fields
        JPanel formPanel = new JPanel();
        formPanel.setLayout(new BoxLayout(formPanel, BoxLayout.Y_AXIS));
        formPanel.setBackground(new Color(85, 85, 220));

        JTextField namaField = new JTextField();
        JPanel namaPanel = createFieldPanel("Masukkan Nama Anda", namaField);
        formPanel.add(namaPanel);
        formPanel.add(Box.createRigidArea(new Dimension(0, 15)));

        JTextField noHpField = new JTextField();
        JPanel noHpPanel = createFieldPanel("Masukkan Nomor HP Anda", noHpField);
        formPanel.add(noHpPanel);
        formPanel.add(Box.createRigidArea(new Dimension(0, 15)));

        JTextField alamatField = new JTextField();
        JPanel alamatPanel = createFieldPanel("Masukkan Alamat Anda", alamatField);
        formPanel.add(alamatPanel);
        formPanel.add(Box.createRigidArea(new Dimension(0, 15)));

        JPanel dokumenPanel = createComboBoxPanel();
        formPanel.add(dokumenPanel);
        formPanel.add(Box.createRigidArea(new Dimension(0, 20)));

        mainPanel.add(formPanel, BorderLayout.CENTER);

        // Submit Button
        JButton submitButton = new JButton("  Simpan Data  ") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(new Color(64, 64, 64));
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 30, 30);
                g2.setColor(Color.WHITE);
                g2.setFont(new Font("Arial", Font.BOLD, 13));
                FontMetrics fm = g2.getFontMetrics();
                int textWidth = fm.stringWidth(getText());
                int textHeight = fm.getAscent();
                int x = (getWidth() - textWidth) / 2;
                int y = (getHeight() + textHeight) / 2 - 4;
                g2.drawString(getText(), x, y);
                g2.dispose();
            }

            @Override
            public boolean isContentAreaFilled() {
                return false;
            }
        };
        submitButton.setPreferredSize(new Dimension(120, 40));
        submitButton.setFocusPainted(false);
        submitButton.setBorderPainted(false);

        submitButton.addActionListener(e -> {
            String nama = namaField.getText().trim();
            String noHp = noHpField.getText().trim();
            String alamat = alamatField.getText().trim();
            String jenisDokumenJaminan = (String) ((JComboBox<?>) dokumenPanel.getComponent(1)).getSelectedItem();

            // Validasi nama
            if (nama.isEmpty() || nama.equals("Masukkan Nama Anda")) {
                JOptionPane.showMessageDialog(this, "Harap masukkan nama!", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validasi nomor HP
            if (noHp.isEmpty() || noHp.equals("Masukkan Nomor HP Anda")) {
                JOptionPane.showMessageDialog(this, "Harap masukkan nomor HP!", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validasi alamat
            if (alamat.isEmpty() || alamat.equals("Masukkan Alamat Anda")) {
                JOptionPane.showMessageDialog(this, "Harap masukkan alamat!", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validasi jenis dokumen jaminan
            if (jenisDokumenJaminan == null || jenisDokumenJaminan.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Harap pilih jenis dokumen jaminan!", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Jika semua validasi berhasil
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan:\n"
                    + "Nama: " + nama + "\n"
                    + "Nomor HP: " + noHp + "\n"
                    + "Alamat: " + alamat + "\n"
                    + "Jenis Dokumen Jaminan: " + jenisDokumenJaminan);
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.setOpaque(false);
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(20, 0, 0, 0));
        buttonPanel.add(submitButton);

        mainPanel.add(buttonPanel, BorderLayout.SOUTH);
    }

    private JPanel createFieldPanel(String placeholder, JTextField textField) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        panel.setBackground(Color.WHITE);

        FontMetrics metrics = panel.getFontMetrics(panel.getFont());
        int textWidth = metrics.stringWidth(placeholder) + 40;

        panel.setPreferredSize(new Dimension(Math.max(textWidth, 280), 35));
        panel.setMaximumSize(new Dimension(320, 35));

        panel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(200, 200, 200)),
                new EmptyBorder(5, 10, 5, 10)
        ));

        textField.setText(placeholder);
        textField.setForeground(Color.GRAY);
        textField.setBorder(null);
        textField.setPreferredSize(new Dimension(textWidth - 30, 25));

        textField.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent e) {
                if (textField.getText().equals(placeholder)) {
                    textField.setText("");
                    textField.setForeground(Color.BLACK);
                }
            }

            public void focusLost(FocusEvent e) {
                if (textField.getText().isEmpty()) {
                    textField.setForeground(Color.GRAY);
                    textField.setText(placeholder);
                }
            }
        });

        panel.add(textField);
        return panel;
    }

    private JPanel createComboBoxPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        panel.setBackground(new Color(85, 85, 220));
        panel.setSize(new Dimension(320, 36));
        panel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(85, 85, 220)),
                new EmptyBorder(5, 10, 5, 10)
        ));

        JLabel dokumenLabel = new JLabel("Jenis Dokumen Jaminan:");
        dokumenLabel.setForeground(Color.WHITE);
        panel.add(dokumenLabel);

        JComboBox<String> dokumenComboBox = new JComboBox<>(new String[]{"KTP", "SIM", "Paspor"});
        dokumenComboBox.setPreferredSize(new Dimension(150, 24));
        dokumenComboBox.setBackground(Color.WHITE);
        dokumenComboBox.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200)));
        panel.add(dokumenComboBox);

        return panel;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            DataRentalFrame dataRentalFrame = new DataRentalFrame();
            dataRentalFrame.setVisible(true);
        });
    }
}
